buildscript {
    repositories {
        jcenter()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.0.M1'
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://repo.spring.io/milestone" }
}

group = 'com.github.otrosien'
version = '0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    snippetsDir = file('build/generated-snippets')
    springRestdocsVersion = '1.1.0.M1'
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'

    runtime 'com.h2database:h2'
    runtime 'org.atteo:evo-inflector:1.2.1'
    runtime 'org.springframework.data:spring-data-rest-hal-browser'

    testCompile 'com.jayway.jsonpath:json-path'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:$springRestdocsVersion"
    testCompile "com.github.otrosien:restdocs-wiremock:0.1"
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn test
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

task wiremockJar(type: Jar) {
	description = 'Generates the jar file containing the wiremock stubs for your REST API.'
	group = 'Build'
	classifier = 'wiremock'
	dependsOn project.tasks.test
	from (snippetsDir) {
		include '**/wiremock-stub.json'
		into "wiremock/${project.name}/mappings"
	}
}

publishing {
	publications {
		wiremockJar(MavenPublication) {
			from project.components.java
			artifact project.tasks.wiremockJar {
				classifier "wiremock"
			}
		}
	}
}

eclipseJdt.onlyIf { false }
cleanEclipseJdt.onlyIf { false }